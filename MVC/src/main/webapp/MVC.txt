MVC.txt

model2방식으로 개발(디자인영역과 비즈니스로직(자바코드)의 분리)
 MVC 패턴 활용
 
 
 * MVC 패턴 (p.556, 567)
   Model : 비즈니스 로직처리 (디비 사용) / .java파일사용(POJO : Plan Old Java Object)
   View  :  화면 UI (디비사용X) / .jsp페이지 만듦
   Controller : model, view사이의 연결/ .java파일사용(Servlet 확장자는 java지만 자바역할도 디비역할도?하는 서블릿필요)
   
   
   사용자 요청 -> 	 web.xml 	->	 Controller		<-> 	Model	    <->   Mysql/Oracle
   				 (배포서술자)			|	
   				 						V
   
    
   사용자 요청 -> 	 web.xml 	->	    FC		<-> 	M [C/M(DAO에 가깝다]  	<->   Mysql/Oracle
   				 (배포서술자)			|	
   				 						V
   				 						
  
  
  
  * 관심사의 분리 => 일을 따로한다. 하나의 목표를 위해서 (= MVC패턴 등장이유, 목적)
  	=> (궁극적인목표) 좋은 코드
   
   
   
   
   * 추상클래스  : 객체를 혼자서 생성할 수 없는 클래스 ( = 자생력이 없음. 혼자서는 못만듦. 
   															but 상속을하면, 누가옆에서 도와주면 만들 수 있음)
 			   	   (만들 수 없는 이유) 추상메서드 때문 )
 			   	   => (사용할 수 있는 방법) 상속관계를 사용해서 객체를 사용
 			   	   	   but 객체를 생성할 수 없는데 부모를 어떻게 만듦? 혼자서 못할뿐 도와주면 만들 수 있음
 			   	   
  	 - 추상메서드  : body{}가 없는 메서드 =  실행할 코드가 없는 메서드 (실행X, 호출하면 안됨)
  	 			    (body{}의역할) 메서드에 필요한 동작을 수행)
  	 			     - public abstract void method() ;
  	 			   
  	 - 상속관계를 사용할 경우 반드시 추상메서드는 '오버라이딩'해서 사용해야함(강제성.무조건!)
  	 				- 원래 오버라이딩 = 부모것을 그대로 가져다 씀, 실행결과만 다름
  	 				- 오버라이딩 할 때 , 똑같이쓰지않고 예외 ㅇ		   
   					-  public void method(){ // abstract와 ;를 삭제
   					
   					   }
   					   
   					   
   	 abstract class 클래스명 {
   	 	변수,상수
   	 	메서드,추상메서드
   	 }
   
   
   
   
   
   
   * 인터페이스(interface) : 혼자서 객체 생성X => 상속을 통한 구현 / 껍데기
	   
	    추상클래스는 IS - A "~이다".
		인터페이스는 HAS - A "~을 할 수 있는".
	   
   interface 인터페이스명 {
   		상수
   		추상메서드
   
   
   } 
   
   
				     <!--  한글처리 필터 설정하기  -->
				  <filter>
				  	<filter-name>Set Character Encoding</filter-name>
				  	<filter-class>필터를 처리해줄 클래스</filter-class>
				  	<init-param></init-param>							init : 초기화
				  														init-param : 파라미터를 가지고 초기화하겠다	
				  </filter>  
				  
				  <filter-mapping>
				  	<filter-name>Set Character Encoding</filter-name>
				  	<url-pattern>/*</url-pattern> 						/* 내프로젝트시작하는 모든주소 
				  </filter-mapping>
				  <!--  한글처리 필터 설정하기  -->
				   
   
   
   
   
   
   
   
   * 커넥션풀(Connection Pool) p.443
   
   :톰캣 자체에서 커넥션풀 지원해주지만 여러회사에서 만드는 커넥션풀이 존재하고, 
    우리는 자카르타에서 지원하는 서버정보를 사용할 것.
    - http://commons.apache.org/ 
      [ 필요한 API 설치 ] 라이브러리 다운받기
	    commons-pool2-2.11.1.jar
	    commons-dbcp2-2.9.0-bin
	    commons-collections4-4.4-bin
   
   
   
   
   
   * CP은 끊임없이 생성되는 커넥션의 문제 해결 기술
   
   => 성능저하 (많은 데이터)
   => 컨테이너(tomcat:생성부터 소멸까지에 대한 모든처리를 관리해주는 것) 당 1개의 커넥션을 사용
   => 컨테이너당 자동지원 수행 (커넥션풀을 백터(어레이리스트 같은것)에 저장관리)
   
   		ex) CP : [con][con][con][con][con][con] {임시con}
   		
   		
   		
   		
   		
   		<특징>
   		
   		1) service() 메서드당 1개씩 할당
   			( jsp나 서블릿을 실행시킬때 작동되는 것. 대여해줬다가 반납받음)
		2) 커넥션의 개수 제한 - 웨이팅
			( 너무많이 만들어주니까 성능이 너무 떨어지므로 필요한 개수만큼 제한할 것)
		    ( 커넥션 필요한 애들 기다리게 해서 다른애가 반납하면 줌)
		3) 커넥션 관리자가 객체 모두 사용시 자원 해제
		
		
		
		
		
		< 작업 순서>
		 
		1. 웹페이지 요청
		2. 할당될 커넥션이 있는지 체크 (커넥션풀)
		3-1. 커넥션이 있을 때 
		  4. 커넥션 객체 할당(대여)
		  5. 커넥션 객체 사용(pstmt, execute()....)
		  6. 커넥션 객체 반납
		  
		3-2. 커넥션이 없을 때
   		  4. 할당될 객체가 없음
   		  5. 객체 반환 대기 / 커넥션 객체 생성(임시)
   		  
   		  
   		  
   		  
   		  
   		< 디비 연결에 필요한 정보 저장 > 
   		  : 고정된 값이므로 바꿀 수 없음
   		  
			<Resource 
				name = "자원의 이름" 
				auth = "자원관리자, Application/Container"  - 특정객체 사용하도록
				type = "리소스를 처리할 수 있는 자바타입" 
				driverClassName = "JDBC 드라이버 주소" 
				username = "DB ID" 
				password = "DB PW" 
				url = "DB 접속 주소" 
				maxWait = "최대 대기 시간" 
			/>
			
		
			<Resource 
				name = "jdbc/mvc" 
				auth = "Container" 
				type = "javax.sql.Datasource" 
				driverClassName = "com.mysql.cj.jdbc.Driver" 
				username = "root" 
				password = "1234" 
				url = "jdbc:mysql://localhost:3306/" 
				maxWait = "5000" 
			/>
		
		
		
		<context.xml> 
		: 대소문자, 서버동기화, 안에 오타있으면 절대안됨.에러생겨도 뜨지않으므로
		<Context>
			<Resource 
				name="jdbc/mvc" 
				auth="Container" 
				type="javax.sql.DataSource" 
				driverClassName="com.mysql.cj.jdbc.Driver" 
				username="root" 
				password="1234" 
				url="jdbc:mysql://localhost:3306/jspdb" 
				maxWait="5000" 
			/>
		</Context>
		
		
		